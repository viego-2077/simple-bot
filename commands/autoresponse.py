# commands/autoresponse.py

import discord

from discord.ext import commands

import json

import os

import asyncio

import re

import string

DATA_FILE = "autoresponses.json"

DEFAULT_TIMEOUT = 20.0  # timeout cho t·ª´ng b∆∞·ªõc nh·∫≠p

# C√°c k√Ω t·ª± d·∫•u c√¢u/b√¨a th∆∞·ªùng g·∫∑p ƒë·ªÉ strip ·ªü ƒë·∫ßu/cu·ªëi

EXTRA_PUNCT = ''.join([

    '"', "'", "‚Äú", "‚Äù", "‚Äò", "‚Äô", "‚Ä¶", "‚Äî", "‚Äì", "¬´", "¬ª", "‚Ä¢", "¬∑"

])

STRIP_CHARS = string.punctuation + EXTRA_PUNCT + " \t\n\r"

class AutoResponse(commands.Cog):

    def __init__(self, bot):

        self.bot = bot

        self.responses = self.load_responses()

    def load_responses(self):

        """Load v√† migrate n·∫øu file c√≤n ƒë·ªãnh d·∫°ng c≈©."""

        if os.path.exists(DATA_FILE):

            with open(DATA_FILE, "r", encoding="utf-8") as f:

                try:

                    data = json.load(f)

                except json.JSONDecodeError:

                    return {}

            # Migrate: n·∫øu value l√† string -> chuy·ªÉn th√†nh dict {"response":..., "mode":1}

            changed = False

            for guild_id, mapping in list(data.items()):

                if isinstance(mapping, dict):

                    for trig, val in list(mapping.items()):

                        if isinstance(val, str):

                            data[guild_id][trig] = {"response": val, "mode": 1}

                            changed = True

                        elif isinstance(val, dict):

                            # ensure keys

                            if "response" not in val:

                                val["response"] = ""

                                changed = True

                            if "mode" not in val:

                                val["mode"] = 1

                                changed = True

                else:

                    data[guild_id] = {}

                    changed = True

            if changed:

                with open(DATA_FILE, "w", encoding="utf-8") as f:

                    json.dump(data, f, ensure_ascii=False, indent=2)

            return data

        return {}

    def save_responses(self):

        with open(DATA_FILE, "w", encoding="utf-8") as f:

            json.dump(self.responses, f, ensure_ascii=False, indent=2)

    # ===== ARADD =====

    @commands.command(name="aradd")

    @commands.has_permissions(manage_messages=True)

    async def aradd(self, ctx):

        """Th√™m auto response."""

        await ctx.send("**Nh·∫≠p trigger:")

        def check(m):

            return m.author == ctx.author and m.channel == ctx.channel

        try:

            trig_msg = await self.bot.wait_for("message", timeout=DEFAULT_TIMEOUT, check=check)

        except asyncio.TimeoutError:

            return await ctx.send("‚åõ H·∫øt th·ªùi gian nh·∫≠p.")

        trigger = trig_msg.content.strip()

        if not trigger:

            return await ctx.send("‚ùå Trigger tr·ªëng.")

        if len(trigger) > 100:

            return await ctx.send("‚ùå Trigger qu√° d√†i.")

        await ctx.send("**nh·∫≠p response:**")

        try:

            resp_msg = await self.bot.wait_for("message", timeout=DEFAULT_TIMEOUT, check=check)

        except asyncio.TimeoutError:

            return await ctx.send("‚åõ H·∫øt th·ªùi gian.")

        response = resp_msg.content.strip()

        if not response:

            return await ctx.send("‚ùå Response tr·ªëng")

        await ctx.send("üõ† **Ch·ªçn mode:1/2**"

        )

        try:

            mode_msg = await self.bot.wait_for("message", timeout=DEFAULT_TIMEOUT, check=check)

        except asyncio.TimeoutError:

            return await ctx.send("‚åõ H·∫øt th·ªùi gian.")

        mode_choice = mode_msg.content.strip()

        if mode_choice not in ("1", "2"):

            return await ctx.send("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá ‚Äî h·ªßy. Vui l√≤ng nh·∫≠p `1` ho·∫∑c `2`.")

        mode = int(mode_choice)

        guild_id = str(ctx.guild.id)

        if guild_id not in self.responses:

            self.responses[guild_id] = {}

        # L∆∞u trigger theo nguy√™n d·∫°ng ng∆∞·ªùi d√πng nh·∫≠p (key)

        self.responses[guild_id][trigger] = {"response": response, "mode": mode}

        self.save_responses()

        mode_text = "Lu√¥n rep (substring)" if mode == 1 else "Exact full message (c·∫£ c√¢u ph·∫£i ƒë√∫ng trigger)"

        await ctx.send(f"ƒê√£ th√™m auto response.")

    # ===== ARLIST =====

    @commands.command(name="arlist")

    async def arlist(self, ctx):

        """Hi·ªÉn th·ªã danh s√°ch auto response c·ªßa server."""

        guild_id = str(ctx.guild.id)

        if guild_id not in self.responses or not self.responses[guild_id]:

            return await ctx.send("üì≠ Server n√†y ch∆∞a c√≥ auto response n√†o.")

        desc_lines = []

        for i, (trig, info) in enumerate(self.responses[guild_id].items(), start=1):

            mode = info.get("mode", 1)

            mode_text = "Mode1 (substring)" if mode == 1 else "Mode2 (exact full message)"

            resp = info.get("response", "")

            desc_lines.append(f"**{i}.** `{trig}` ‚Üí {resp} ‚Äî *{mode_text}*")

        desc = "\n".join(desc_lines)

        if len(desc) > 4000:

            desc = desc[:3990] + "\n... (v·∫´n c√≤n)"

        embed = discord.Embed(title="Danh s√°ch Auto Response", description=desc, color=discord.Color.green())

        await ctx.send(embed=embed)

    # ===== ARREMOVE =====

    @commands.command(name="arremove")

    @commands.has_permissions(manage_messages=True)

    async def arremove(self, ctx, *, trigger: str = None):

        """

        X√≥a auto response

        """

        guild_id = str(ctx.guild.id)

        if guild_id not in self.responses or not self.responses[guild_id]:

            return await ctx.send("‚ùå Server n√†y ch∆∞a c√≥ auto response n√†o ƒë·ªÉ x√≥a.")

        if not trigger:

            return await ctx.send("‚ö†Ô∏è D√πng: `!arremove <t√™n trigger ho·∫∑c s·ªë th·ª© t·ª±>`")

        data = self.responses[guild_id]

        removed_key = None

        # N·∫øu nh·∫≠p s·ªë th·ª© t·ª±

        if trigger.isdigit():

            idx = int(trigger)

            keys = list(data.keys())

            if 1 <= idx <= len(keys):

                removed_key = keys[idx - 1]

        else:

            # t√¨m exact tr∆∞·ªõc

            lowered = trigger.lower()

            for key in data.keys():

                if key.lower() == lowered:

                    removed_key = key

                    break

            # n·∫øu kh√¥ng exact, t√¨m ch·ª©a (g·∫ßn ƒë√∫ng)

            if not removed_key:

                for key in data.keys():

                    if lowered in key.lower():

                        removed_key = key

                        break

        if not removed_key:

            return await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y trigger ph√π h·ª£p ƒë·ªÉ x√≥a.")

        del data[removed_key]

        self.save_responses()

        await ctx.send(f"üóëÔ∏è ƒê√£ x√≥a auto response `{removed_key}`")

    # ===== MESSAGE LISTENER =====

    @commands.Cog.listener()

    async def on_message(self, message: discord.Message):

        # B·ªè qua bot ho·∫∑c DM

        if message.author.bot or not message.guild:

            return

        guild_id = str(message.guild.id)

        if guild_id not in self.responses:

            return

        content = message.content

        if not content:

            return

        # duy·ªát triggers theo th·ª© t·ª± l∆∞u ‚Äî d·ª´ng ·ªü trigger ƒë·∫ßu ti√™n kh·ªõp

        for trig, info in self.responses[guild_id].items():

            mode = int(info.get("mode", 1))

            response = info.get("response", "")

            if mode == 1:

                # substring match (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)

                if trig.lower() in content.lower():

                    try:

                        await message.channel.send(response)

                    except Exception:

                        pass

                    break

            else:

                # mode 2: exact full message match (sau strip ƒë·∫ßu/cu·ªëi d·∫•u c√¢u & whitespace)

                # L·∫•y n·ªôi dung v√† strip whitespace/d·∫•u c√¢u ·ªü hai ƒë·∫ßu

                normalized = content.strip().strip(STRIP_CHARS)

                if normalized.lower() == trig.lower():

                    try:

                        await message.channel.send(response)

                    except Exception:

                        pass

                    break

async def setup(bot):

    await bot.add_cog(AutoResponse(bot))